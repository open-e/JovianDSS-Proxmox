#!/usr/bin/python3

import argparse
#import logging as log
import uuid

import yaml
import sys

from jovian_common import iscsi

import pool

import logging

LOG = logging.getLogger(__name__)
LOG.setLevel(logging.DEBUG)

 
def get_config():
    parser = argparse.ArgumentParser(description='JDSS simple CLI')

    lvls = [ logging.getLevelName(i) for i in range(7)]
    parser.add_argument('-c', '--config', dest='config', required=True, help='Path of configuration file')
    log_levels = ['critical', 'error', 'warning', 'info', 'debug']
    parser.add_argument('-l', 
                        '--logging',
                        dest='jcli_logging',
                        required=False,
                        choices=log_levels,
                        default='debug',
                        help='Logging level')
    parser.add_argument('--logfile', dest='jcli_log_file', help='File to store log to', required=False)
    parser.add_argument('-p', '--plain', dest='plain', required=False, action='store_true', default=False, help='Plain format')

    command = parser.add_subparsers(required=True, dest='command')

    pool_parser = command.add_parser('pool', add_help=False)

    args = parser.parse_known_args()
    return args

def main():
    (args, uargs) = get_config()
    if args.jcli_logging:
        numeric_level = getattr(logging, args.jcli_logging.upper(), None)
        if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)
        logging.basicConfig(format='%(asctime)s %(message)s', filename='/tmp/jcli.log', level=numeric_level)

    cfgFile = open(args.config)
    
    config = yaml.safe_load(open(args.config))
   
    # list available commands
    cmd = {'pool': pool.Pools}
    
    jdss = iscsi.JovianISCSIDriver(config)
    jdss.do_setup('')

    args = vars(args)
    # Run command
    out = cmd[args.pop('command')](args, uargs, jdss)
    #cmd['pool'](args, jdss)

if __name__ == "__main__":
    #try:
    main()
    #except Exception as err:
    #    LOG.error(err)
    #    sys.exit(1)
