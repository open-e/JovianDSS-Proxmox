#!/usr/bin/python3

#    Copyright (c) 2022 Open-E, Inc.
#    All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import argparse
import uuid

import yaml
import sys

from jdssc.jovian_common import iscsi

import jdssc.pool as pool

import logging
from logging.handlers import RotatingFileHandler

LOG = logging.getLogger(__name__)
LOG.setLevel(logging.DEBUG)

 
def get_config():
    parser = argparse.ArgumentParser(description='JDSS simple CLI')

    lvls = [ logging.getLevelName(i) for i in range(7)]
    parser.add_argument('-c', '--config', dest='config', required=True, help='Path of configuration file')
    log_levels = ['critical', 'error', 'warning', 'info', 'debug']
    parser.add_argument('-l',
                        '--loglvl',
                        dest='cli_log_lvl',
                        required=False,
                        choices=log_levels,
                        default='info',
                        help='Logging level')
    parser.add_argument('--logfile', dest='cli_log_file', help='File to store log to', required=False)
    parser.add_argument('-p', '--plain', dest='plain_mode', required=False, action='store_true', default=False, help='Plain format')

    command = parser.add_subparsers(required=True, dest='command')

    pool_parser = command.add_parser('pool', add_help=False)
    hosts = command.add_parser('hosts', add_help=False)

    args = parser.parse_known_args()
    return args

def setup_logging(args, cfg):

    loglvl = None

    if args.cli_log_lvl:
        loglvl = args.cli_log_lvl
    elif 'loglvl' in cfg:
        loglvl = cfg['loglvl']

    logfile = None

    if args.cli_log_file:
        logfile = args.cli_log_file
    elif 'logfile' in cfg:
        logfile = cfg['logfile']

    if loglvl and logfile:
        numeric_level = getattr(logging, loglvl.upper(), None)
        if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)
        handler = RotatingFileHandler(logfile, maxBytes=1024*1024*16, backupCount=5)
        formatter = logging.Formatter('%(asctime)s %(message)s')
        handler.setFormatter(formatter)

        log = logging.getLogger()
        log.setLevel(numeric_level)
        log.addHandler(handler)

def hosts(args, uargs, jdss):
    
    for i in jdss.configuration['rest_api_addresses']:
        addr = i
        if 'target_port' in jdss.configuration:
            addr = '%s:%s' % (addr, jdss.configuration['target_port'])
        sys.stdout.write(addr + "\n")
        #print(i)

def main():
    (args, uargs) = get_config()
    if args.cli_log_lvl and args.cli_log_file:
        numeric_level = getattr(logging, args.cli_log_lvl.upper(), None)
        if not isinstance(numeric_level, int):
                raise ValueError('Invalid log level: %s' % loglevel)
        handler = RotatingFileHandler(args.cli_log_file, maxBytes=1024*1024*16, backupCount=5)
        formatter = logging.Formatter('%(asctime)s %(message)s')
        handler.setFormatter(formatter)
       
        log = logging.getLogger()
        log.setLevel(numeric_level)
        log.addHandler(handler)

    cfgFile = open(args.config)

    config = yaml.safe_load(open(args.config))

    setup_logging(args, config)
    # list available commands
    cmd = {'pool': pool.Pools,
           'hosts': hosts}
    
    jdss = iscsi.JovianISCSIDriver(config)
    jdss.do_setup('')

    args = vars(args)
    # Run command
    out = cmd[args.pop('command')](args, uargs, jdss)

if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        #sys.stderr.write("error: %s\n" % err)
        LOG.error(err, exc_info=True)
        sys.exit(1)
