#!/usr/bin/python3

#    Copyright (c) 2024 Open-E, Inc.
#    All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import argparse

import yaml
import sys

from jdssc.jovian_common import driver

import jdssc.pool as pool

import logging
from logging.handlers import RotatingFileHandler


def parse_args():
    parser = argparse.ArgumentParser(description='JDSS simple CLI')

    parser.add_argument('-c',
                        '--config',
                        dest='config',
                        default=None,
                        required=False,
                        help='Path to yaml configuration file')
    log_levels = ['critical', 'error', 'warning', 'info', 'debug',
                  'CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG']

    parser.add_argument('-l',
                        '--loglvl',
                        dest='loglvl',
                        required=False,
                        choices=log_levels,
                        default='info',
                        help='Logging level')
    parser.add_argument('--logfile',
                        dest='cli_log_file',
                        default=None,
                        help='File to store log to',
                        required=False)
    parser.add_argument('--logstd',
                        dest='cli_log_std',
                        default=False,
                        action='store_true',
                        help='File to store log to',
                        required=False)

    parser.add_argument('-p', '--plain', dest='plain_mode', required=False,
                        action='store_true',
                        default=False,
                        help='Plain format')

    true_false = ['true', 'True', 'TRUE', '1', 1, 'yes', 'YES', 'y', 'Y', 't',
                  'T',
                  'false', 'False', 'FALSE', '0', 0, 'no', 'NO', 'n', 'N', 'f',
                  'F']

    parser.add_argument('--ssl-cert-verify',
                        dest='ssl_cert_verify',
                        required=False,
                        choices=true_false,
                        default=None,
                        help='''Enforce certificate verification.
                        Enabled by default.''')

    parser.add_argument('--controll-addresses',
                        dest='controll_addresses',
                        required=False,
                        default=None,
                        help='''Coma separated list of ip addresses,
                        that will be used to send controll REST requests
                        to JovianDSS storage.''')

    parser.add_argument('--controll-ports',
                        dest='controll_port',
                        required=False,
                        default=None,
                        help='''Port number that will be used to send REST
                        request, single for all addresses''')

    parser.add_argument('--user-name',
                        dest='user_name',
                        required=False,
                        default=None,
                        help='User name')

    parser.add_argument('--user-password',
                        dest='user_password',
                        required=False,
                        default=None,
                        help='User password')

    parser.add_argument('--data-addresses',
                        dest='data_addresses',
                        required=False,
                        default=None,
                        help='''Coma separated list of ip addresses,
                        that will be used to transfer storage data
                        (iSCSI data)''')

    parser.add_argument('--data-ports',
                        dest='data_port',
                        required=False,
                        default=None,
                        help='''Port number that will be used to
                        transfer storage data(iSCSI data)''')

    # parser.add_argument('--iscsi-target-prefix',
    #                     dest='iscsi_target_prefix',
    #                     default='iqn.%Y-%m.iscsi:',
    #                     help='''
    #                     Pattern for target name prefix.
    #                     User can specify plain text or template
    #                     in python strftime format.
    #                     Default is "iqn.%%Y-%%m.iscsi:"
    #                     ''',
    #                     required=False)

    command = parser.add_subparsers(required=True, dest='command')

    command.add_parser('pool', add_help=True)
    host_parser = command.add_parser('hosts', add_help=True)
    host_parser.add_argument('-r', '--rest',
                             dest='rest',
                             action='store_true',
                             default=False,
                             help='Provide REST VIP addresses')
    host_parser.add_argument('-i', '--iscsi',
                             dest='iscsi',
                             action='store_true',
                             default=False,
                             help='Provide iSCSI VIP addresses')

    host_parser.add_argument('-n', '--nfs',
                             dest='nfs',
                             action='store_true',
                             default=False,
                             help='Provide NFS VIP addresses')
    host_parser.add_argument('-p', '--port',
                             dest='port',
                             action='store_true',
                             default=False,
                             help='Add port to addresses')

    cfg = command.add_parser('cfg', add_help=True)
    cfg.add_argument('--getlogfile',
                     dest='get_log_file',
                     action='store_true',
                     default=False,
                     help=('Provides path to current log Provide REST '
                           'VIP addresses'))

    args = parser.parse_known_args()
    return args


def setup_logging(args, cfg):

    loglvl = 'info'
    if 'loglvl' in cfg:
        loglvl = cfg['loglvl']
    elif 'loglevel' in cfg:
        loglvl = cfg['loglevel']

    if args.loglvl != "info":
        loglvl = args.loglvl

    logfile = None

    if args.cli_log_file:
        cfg['logfile'] = args.cli_log_file
        logfile = args.cli_log_file
    if 'logfile' not in cfg:
        cfg['logfile'] = "/var/log/joviandss/joviandss.log"

    logfile = cfg['logfile']

    handlers = []
    if logfile:
        handlers.append(RotatingFileHandler(logfile,
                                            maxBytes=1024*1024*16,
                                            backupCount=5))

    if args.cli_log_std:
        handlers.append(logging.StreamHandler(sys.stdout))

    numeric_level = getattr(logging, loglvl.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % loglvl)

    logging.basicConfig(
        level=numeric_level,
        format=(
            '%(asctime)s.%(msecs)d - %(name)s - %(levelname)s - %(message)s'),
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=handlers
    )

    logger = logging.getLogger()
    err_handler = logging.StreamHandler(sys.stderr)  # Error handler
    err_handler.setLevel(logging.ERROR)  # Capture only errors
    eformater = logging.Formatter('%(message)s')

    err_handler.setFormatter(eformater)

    logger.addHandler(err_handler)


def unify_config_options(args, cfg):
    """
    jdssc uses heavily OpenStack deiver code and since some options was renamed
    we have to ensure that old option names translate into new code properly
    """

    if 'rest_api_addresses' in cfg:
        cfg['san_hosts'] = cfg['rest_api_addresses']

    if 'rest_api_port' in cfg:
        cfg['san_api_port'] = cfg['rest_api_port']

    if 'rest_api_login' in cfg:
        cfg['san_login'] = cfg['rest_api_login']

    if 'rest_api_password' in cfg:
        cfg['san_password'] = cfg['rest_api_password']

    if 'thin_provision' in cfg:
        cfg['san_thin_provision'] = cfg['thin_provision']

    if 'loglevel' in cfg:
        cfg['loglvl'] = cfg['loglevel']

    if args.ssl_cert_verify:
        if args.ssl_cert_verify.lower() in ('true', '1', 1, 'yes', 'y', 't'):
            cfg['driver_ssl_cert_verify'] = True
        if args.ssl_cert_verify.lower() in ('false', '0', 0, 'no', 'n', 'f'):
            cfg['driver_ssl_cert_verify'] = False

    cfg['driver_use_ssl'] = True
    cfg['jovian_rest_send_repeats'] = 3

    if args.controll_addresses:
        cfg['san_hosts'] = args.controll_addresses.split(',')

    if args.controll_port:
        cfg['san_api_port'] = args.controll_port

    if args.user_name:
        cfg['san_login'] = args.user_name

    if args.user_password:
        cfg['san_password'] = args.user_password

    return cfg


def hosts(args, uargs, jdss):
    if 'iscsi' in args and args['iscsi']:
        ip_list = []
        if len(jdss.jovian_iscsi_vip_addresses) > 0:
            ip_list = jdss.jovian_iscsi_vip_addresses
        else:
            ip_list = jdss.jovian_hosts
        for ip in ip_list:
            addr = ip
            if args['port']:
                addr = '%s:%s' % (addr, jdss.jovian_iscsi_target_portal_port)
            sys.stdout.write(addr + "\n")
        return

    if 'nfs' in args and args['nfs']:
        ip_list = []
        if len(jdss.jovian_nfs_vip_addresses) > 0:
            ip_list = jdss.jovian_nfs_vip_addresses
        else:
            ip_list = jdss.jovian_hosts
        for ip in ip_list:
            addr = ip
            sys.stdout.write(addr + "\n")
        return

    if 'rest' in args and args['rest']:

        ip_list = jdss.jovian_hosts
        for ip in ip_list:
            addr = ip
            if args['port']:
                addr = '%s:%s' % (addr, jdss.jovian_rest_port)
            sys.stdout.write(addr + "\n")


def cfg(args, uargs, jdss):
    log_file_path = jdss.configuration.get('logfile')

    if (('get_log_file' in args) and (args['get_log_file'] is True)):
        sys.stdout.write(log_file_path + "\n")


def main():
    (args, uargs) = parse_args()

    # TODO: give better error message for cases when user provides
    # incorrect config path that results in
    # FileNotFoundError: [Errno 2] No such file or directory: 'some file path'
    config = dict()
    if args.config:
        config = yaml.safe_load(open(args.config))

    config = unify_config_options(args, config)
    setup_logging(args, config)
    # list available commands
    cmd = {'pool': pool.Pools,
           'hosts': hosts,
           'cfg': cfg}

    jdss = driver.JovianDSSDriver(config)

    args = vars(args)
    # Run command
    cmd[args.pop('command')](args, uargs, jdss)


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        LOG = logging.getLogger(__name__)
        LOG.error(err, exc_info=True)
        sys.exit(1)
