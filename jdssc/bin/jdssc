#!/usr/bin/python3

#    Copyright (c) 2022 Open-E, Inc.
#    All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import argparse

import yaml
import sys

from jdssc.jovian_common import driver

import jdssc.pool as pool

import logging
from logging.handlers import RotatingFileHandler


def get_config():
    parser = argparse.ArgumentParser(description='JDSS simple CLI')

    parser.add_argument('-c', '--config', dest='config', required=True,
                        help='Path of configuration file')
    log_levels = ['critical', 'error', 'warning', 'info', 'debug',
                  'CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG']
    parser.add_argument('-l',
                        '--loglvl',
                        dest='cli_log_lvl',
                        required=False,
                        choices=log_levels,
                        default='info',
                        help='Logging level')
    parser.add_argument('--logfile',
                        dest='cli_log_file',
                        help='File to store log to',
                        required=False)
    parser.add_argument('--logstd',
                        dest='cli_log_std',
                        default=False,
                        action='store_true',
                        help='File to store log to',
                        required=False)

    parser.add_argument('-p', '--plain', dest='plain_mode', required=False,
                        action='store_true',
                        default=False,
                        help='Plain format')

    command = parser.add_subparsers(required=True, dest='command')

    command.add_parser('pool', add_help=False)
    command.add_parser('hosts', add_help=False)

    args = parser.parse_known_args()
    return args


def setup_logging(args, cfg):

    loglvl = 'info'
    if 'loglvl' in cfg:
        loglvl = cfg['loglvl']
    if args.cli_log_lvl != "info":
        loglvl = args.cli_log_lvl

    logfile = None
    if 'logfile' in cfg:
        logfile = cfg['logfile']
    if args.cli_log_file:
        logfile = args.cli_log_file

    handlers = []
    if logfile:
        handlers.append(RotatingFileHandler(logfile,
                                            maxBytes=1024*1024*16,
                                            backupCount=5))

    if args.cli_log_std:
        handlers.append(logging.StreamHandler(sys.stdout))

    numeric_level = getattr(logging, loglvl.upper(), None)
    if not isinstance(numeric_level, int):
        raise ValueError('Invalid log level: %s' % loglvl)

    logging.basicConfig(
        level=numeric_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=handlers
    )

    logger = logging.getLogger()
    err_handler = logging.StreamHandler(sys.stderr)  # Error handler
    err_handler.setLevel(logging.ERROR)  # Capture only errors
    eformater = logging.Formatter('%(levelname)s - %(message)s')
            # '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            # datefmt='%Y-%m-%d %H:%M:%S')

    err_handler.setFormatter(eformater)

    logger.addHandler(err_handler)
    # logging.basicConfig(
    #     level=logging.ERROR,

    #     handlers=logging.StreamHandler(sys.stderr)
    # )


def duplicate_config_options(cfg):
    """
    jdssc uses heavily OpenStack deiver code and since some options was renamed
    we have to ensure that old option names translate into new code properly
    """

    if 'rest_api_addresses' in cfg:
        cfg['san_hosts'] = cfg['rest_api_addresses']

    if 'rest_api_port' in cfg:
        cfg['san_api_port'] = cfg['rest_api_port']

    if 'rest_api_login' in cfg:
        cfg['san_login'] = cfg['rest_api_login']

    if 'rest_api_password' in cfg:
        cfg['san_password'] = cfg['rest_api_password']

    if 'thin_provision' in cfg:
        cfg['san_thin_provision'] = cfg['thin_provision']

    if 'loglevel' in cfg:
        cfg['loglvl'] = cfg['loglevel']

    return cfg


def hosts(args, uargs, jdss):
    for i in jdss.configuration['san_hosts']:
        addr = i
        if 'target_port' in jdss.configuration:
            addr = '%s:%s' % (addr, jdss.configuration['target_port'])
        sys.stdout.write(addr + "\n")


def main():
    (args, uargs) = get_config()

    config = yaml.safe_load(open(args.config))
    config = duplicate_config_options(config)
    setup_logging(args, config)
    # list available commands
    cmd = {'pool': pool.Pools,
           'hosts': hosts}

    jdss = driver.JovianDSSDriver(config)
    # jdss.do_setup('')

    args = vars(args)
    # Run command
    cmd[args.pop('command')](args, uargs, jdss)


if __name__ == "__main__":
    try:
        main()
    except Exception as err:
        LOG = logging.getLogger(__name__)
        LOG.error(err, exc_info=True)
        sys.exit(1)
