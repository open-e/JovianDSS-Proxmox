#!/usr/bin/python3

import argparse
#import logging as log
import uuid

import yaml
import sys

from jovian_common import iscsi

import pool

from oslo_config import cfg
from oslo_log import log as logging


CONF = cfg.CONF

#rate_limit_except_level
logging.register_options(CONF)
logging.setup(CONF, "joviandss-cli")

LOG = logging.getLogger(__name__)
#LOG.setLevel(logging.DEBUG)

 
def get_config():
    parser = argparse.ArgumentParser(description='JDSS simple CLI')

    parser.add_argument('-c', '--config', dest='config', required=True, help='Path of configuration file')
    parser.add_argument('-p', '--plain', dest='config', required=False, action='store_true', default=False, help='Path of configuration file')

    
    command = parser.add_subparsers(required=True, dest='command')

    ###########################################################################
    #  pool parser

    pool_parser = command.add_parser('pool', add_help=False)

    #pool_parser.add_argument('pool_name', type=str, default='Pool-0', help='Pool name')

    #pool_sub_object_parsers = pool_parser.add_subparsers(required=True, dest='pool_sub_object')
    #pool_volumes_parser = pool_sub_object_parsers.add_parser('volumes', add_help=False)
  

    #pool_volumes_act = pool_volumes_prs.add_mutually_exclusiv_group(required=False)

    #pool_volumes_parser.add_argument('volumes_args', type=str, nargs='*', help='Volume or operation related to it')

    #pool_volume_act = pool_volume_parser.add_subparsers(required=True, dest='volume_sub_object')

    #pool_volume_act.add_argument('-c', '--create', type=str, 
    #
    #volume_create = pool_volume_actions.add_parser('create')


    #volume_list = pool_volume_actions.add_parser('list')




    #volume_delete = pool_volume_actions.add_parser('delete')

    #volume_delete.add_argument('volume_name', nargs=1, type=str, help='Name of volume to delete')
    
    #pool_volume_parser = pool_volume_actions.add_parser('snapshot')

    ###########################################################################

    args = parser.parse_known_args()
    return args


def main():
    args, uargs = get_config()

    #cfgFile = open(args['config'])
    
    config = yaml.safe_load(open(args.config))
   
    # list available commands
    cmd = {'pool': pool.Pools}
    
    jdss = iscsi.JovianISCSIDriver(config)
    jdss.do_setup('')

    args = vars(args)
    # Run command
    out = cmd[args.pop('command')](args, uargs, jdss)
    #cmd['pool'](args, jdss)

if __name__ == "__main__":
    #try:
    main()
    #except Exception as err:
    #    LOG.error(err)
    #    sys.exit(1)
